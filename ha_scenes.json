[
   {
      "id":"aee004a8.4891e8",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Set current period",
      "func":"function getDateTime(text) {\n  var textParts = text.split(\":\");\n  \n  var dt = new Date();\n  dt.setHours(parseInt(textParts[0]));\n  dt.setMinutes(parseInt(textParts[1]));\n  dt.setSeconds(parseInt(textParts[2]));\n  dt.setMilliseconds(0);\n  \n  return dt;\n}\n\nfunction getCurrentPeriodState(todayPeriods) {\n    var today = getNow();\n    var todayPeriodKeys = Object.keys(todayPeriods);\n    var currentPeriod = todayPeriodKeys[todayPeriodKeys.length - 1];\n  \n    todayPeriodKeys.forEach(function(key) {\n        var periodTimeStr = todayPeriods[key];\n        var periodTime = getDateTime(periodTimeStr);\n\n        if(today >= periodTime) {\n            currentPeriod = key;    \n        }  \n    });\n    return currentPeriod;\n}\n\nfunction getNow(){\n    var now = new Date();\n\n    return now;\n}\n\nvar logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    msg.now = getNow();\n    msg.periodState = getCurrentPeriodState(msg.todayPeriods)\n    msg.periodStateChanged = msg.periodState != msg.flowData.periodState;\n    \n    if(msg.periodStateChanged) {\n        var message = 'Day period changed from ' + msg.flowData.periodState + ' to ' + msg.periodState;\n        msg.flowMessage = msg.flowMessage + ', ' + message;\n    }\n    \n    flow.set(\"periodState\", msg.periodState);\n    \n    if(msg.flowData.saveGlobal) {\n        global.set(\"periodState\", msg.periodState);\n    }\n    \n    node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n}\ncatch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":1530,
      "y":460,
      "wires":[
         [
            "4b0c9c8f.01fdb4"
         ]
      ]
   },
   {
      "id":"51432126.6355a",
      "type":"change",
      "z":"e9fe1d42.a0e2a",
      "name":"Set configurations",
      "rules":[
         {
            "t":"set",
            "p":"flowMessage",
            "pt":"msg",
            "to":"\"Triggered by: \" & flowTrigger",
            "tot":"jsonata"
         },
         {
            "t":"set",
            "p":"flow_name",
            "pt":"msg",
            "to":"flowName",
            "tot":"flow"
         },
         {
            "t":"set",
            "p":"flow_number",
            "pt":"msg",
            "to":"flowNumber",
            "tot":"flow"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1530,
      "y":240,
      "wires":[
         [
            "8f074656.d7b9c8"
         ]
      ]
   },
   {
      "id":"c1ba5dfb.3f1b6",
      "type":"change",
      "z":"e9fe1d42.a0e2a",
      "name":"Set next away action",
      "rules":[
         {
            "t":"set",
            "p":"nextAwayAction",
            "pt":"flow",
            "to":"($toMillis($now()) / 1000 / 60 / 60) + 1",
            "tot":"jsonata"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":2300,
      "y":160,
      "wires":[
         [
            "ac6199fe.6bd0a8"
         ]
      ]
   },
   {
      "id":"f513d40.40c213",
      "type":"switch",
      "z":"e9fe1d42.a0e2a",
      "name":"Profile",
      "property":"profile_id",
      "propertyType":"msg",
      "rules":[
         {
            "t":"jsonata_exp",
            "v":"presenceState = false \tand\t(\t    (presence_state_changed = true) \t    or \t    (\t        presence_state_changed = false \t        and\t        (\t            (flow_invoker != \"Scheduler\") \t            or \t            (\t                flow_invoker = \"Scheduler\"\t                and\t                next_away_action <= ($toMillis($now()) / 1000 / 60 / 60)\t            )\t        )\t    )\t)",
            "vt":"jsonata"
         },
         {
            "t":"jsonata_exp",
            "v":"presenceState = true and \t(\t    presenceStateChanged = true\t    or\t    flowTrigger = \"Startup\"\t    or \t    periodStateChanged = true\t    or\t    dayTypeChanged = true\t)",
            "vt":"jsonata"
         },
         {
            "t":"else"
         }
      ],
      "checkall":"false",
      "repair":false,
      "outputs":3,
      "x":2050,
      "y":340,
      "wires":[
         [
            "c1ba5dfb.3f1b6"
         ],
         [
            "70ee6fbb.e9f0b"
         ],
         [
            "2383c6ca.27972a"
         ]
      ]
   },
   {
      "id":"22162fda.d83aa",
      "type":"switch",
      "z":"e9fe1d42.a0e2a",
      "name":"Scene",
      "property":"periodState",
      "propertyType":"msg",
      "rules":[
         {
            "t":"eq",
            "v":"Morning",
            "vt":"str"
         },
         {
            "t":"eq",
            "v":"Noon",
            "vt":"str"
         },
         {
            "t":"eq",
            "v":"Afternoon",
            "vt":"str"
         },
         {
            "t":"eq",
            "v":"Evening",
            "vt":"str"
         },
         {
            "t":"eq",
            "v":"Night",
            "vt":"str"
         }
      ],
      "checkall":"false",
      "repair":false,
      "outputs":5,
      "x":2510,
      "y":420,
      "wires":[
         [
            "b34252f5.46e0c"
         ],
         [
            "9b065308.6c27c"
         ],
         [
            "a1322713.4b33a8"
         ],
         [
            "3e490209.bc8d3e"
         ],
         [
            "8813930.ec25c7"
         ]
      ]
   },
   {
      "id":"c9e6f849.f05f08",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Set day type",
      "func":"function getTodaysDetails(){\n\tvar today = new Date();\n\tvar todayDate = getDateFromDate(today);\n\t\n\tvar result = {};\n\tresult.Name = today.toLocaleDateString(\"en-IL\", { weekday: 'long' });\n\tresult.DateISO = todayDate;\n\t\n\treturn result;\t\n}\n\nDate.prototype.toISO = function() {\n    return this.getFullYear() +\n    '-' + pad(this.getMonth() + 1) +\n    '-' + pad(this.getDate()) +\n    'T' + pad(this.getHours()) +\n    ':' + pad(this.getMinutes()) +\n    ':' + pad(this.getSeconds()) +\n    '.' + (this.getMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n    'Z';\n};\n\nfunction pad(number) {\n    if (number < 10) {\n        return '0' + number;\n    }\n    \n    return number;\n}\n\nfunction getDateFromDate(date){\n    var fullDateISO = date.toISO();\n  \n    var fullDateISOArr = fullDateISO.split(\"T\");\n    var dateISO = fullDateISOArr[0];\n    \n    return dateISO;\n}\n\nfunction getDateFromISODate(dateStr){\n    var ts = Date.parse(dateStr);\n    var date = new Date(1970, 0, 1);\n  \n    date.setMilliseconds(ts);\n    \n    var dateISO = getDateFromDate(date);\n    \n    return dateISO;\n}\n\nfunction getTodaysEvents(today, specialDay, lookForEvents) {\n\tvar result = [];\n\n    var isSpecialDay = today.Name.toLowerCase() == specialDay.toLowerCase()\n    \n    if(isSpecialDay) {\n        result.push(specialDay);\n    }\n    \n    if(lookForEvents !== null) {\n        Object.keys(lookForEvents).forEach(function(key) {\n            var dateStr = lookForEvents[key];\n            var dateISO = getDateFromISODate(dateStr);\n            \n            var isMatch = today.DateISO == dateISO;\n            if(isMatch) {\n                result.push(key);\n            }  \n        }); \n    }\n\n\treturn result.join(\", \");\n}\n\nvar logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    var today = getTodaysDetails();\n    \n    var todaysHolidayEvents = getTodaysEvents(today, msg.flowData.weekend, msg.flowData.holidayEvents);\n    var todaysHalfDayEvents = getTodaysEvents(today, msg.flowData.weekendEvening, msg.flowData.halfDayEvents);\n    \n    var dayType = \"Default\";\n    var dayTypeExtendedDetails = \"\";\n    \n    if (todaysHalfDayEvents.length > 0) {\n    \tdayType = \"Holiday Evening\";\n    \tdayTypeExtendedDetails = todaysHalfDayEvents;\n    }\n    \n    if(todaysHolidayEvents.length > 0) {\n    \tdayType = \"Holiday\";\n    \tdayTypeExtendedDetails = todaysHolidayEvents;\n    } \n    \n    msg.todaysHolidayEvents = todaysHolidayEvents;\n    msg.todaysHalfDayEvents = todaysHalfDayEvents;\n    msg.dayType = dayType;\n    msg.dayTypeChanged = msg.dayType != msg.flowData.dayType;\n    \n    var changeLog = [];\n    \n    if(msg.dayTypeChanged) {\n        var message = 'Day Type changed from ' + msg.flowData.dayType + ' to ' + msg.dayType;\n        changeLog.push(message);\n        \n        if(dayType != \"Default\") {\n            var message = dayType + \": \" + dayTypeExtendedDetails;\n            changeLog.push(message);\n        }\n    }\n    \n    if(changeLog.length > 0) {\n        var changeLogMessage = changeLog.join(\", \");\n        msg.flowMessage = msg.flowMessage + ', ' + changeLogMessage;\n    }\n    \n    flow.set(\"dayType\", dayType);\n    \n    node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n}\ncatch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\nreturn msg;\n",
      "outputs":1,
      "noerr":0,
      "x":1510,
      "y":340,
      "wires":[
         [
            "e312f7d5.f5cfe8"
         ]
      ]
   },
   {
      "id":"8ec0904d.76626",
      "type":"inject",
      "z":"e9fe1d42.a0e2a",
      "name":"Startup",
      "topic":"Startup",
      "payload":"",
      "payloadType":"date",
      "repeat":"",
      "crontab":"",
      "once":true,
      "onceDelay":"3",
      "x":100,
      "y":100,
      "wires":[
         [
            "b9b9641.6d7d498"
         ]
      ]
   },
   {
      "id":"2383c6ca.27972a",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"Log Message",
      "field":"log_message",
      "fieldType":"msg",
      "format":"handlebars",
      "syntax":"mustache",
      "template":"Nothing to change - {{{flowMessage}}}\n",
      "output":"str",
      "x":2280,
      "y":600,
      "wires":[
         [
            "4d97fab8.ae50a4"
         ]
      ]
   },
   {
      "id":"70ee6fbb.e9f0b",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"Log Message",
      "field":"log_message",
      "fieldType":"msg",
      "format":"handlebars",
      "syntax":"mustache",
      "template":"Home flow - {{{flowMessage}}}",
      "output":"str",
      "x":2280,
      "y":300,
      "wires":[
         [
            "22162fda.d83aa",
            "6630f544.9c666c"
         ]
      ]
   },
   {
      "id":"ac6199fe.6bd0a8",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"Log Message",
      "field":"log_message",
      "fieldType":"msg",
      "format":"handlebars",
      "syntax":"mustache",
      "template":"Away flow - {{{flowMessage}}}",
      "output":"str",
      "x":2720,
      "y":160,
      "wires":[
         [
            "6630f544.9c666c",
            "282703df.348ffc"
         ]
      ]
   },
   {
      "id":"3d3597c4.36ea38",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Changed to Away",
      "info":"presence_state = false and presence_state_changed = true",
      "x":2280,
      "y":120,
      "wires":[

      ]
   },
   {
      "id":"c72ac4ad.35d998",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Away, not changed over the last hour",
      "info":"presence_state = false and presence_state_changed = false and global_next_away_action <= ($toMillis($now) / 1000 / 60 / 60)",
      "x":2520,
      "y":120,
      "wires":[

      ]
   },
   {
      "id":"4da42f70.285e4",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Away changed to Home",
      "info":"presence_state = true and presence_state_changed = true",
      "x":2540,
      "y":260,
      "wires":[

      ]
   },
   {
      "id":"44254d9e.13a0c4",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"At Home, period changed",
      "info":"presence_state = true and presence_state_changed = false and period_state_changed = true",
      "x":2310,
      "y":260,
      "wires":[

      ]
   },
   {
      "id":"45d4cb27.683b44",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"At Home - no change",
      "info":"presence_state = true and presence_state_changed = false and period_state_changed = false",
      "x":2300,
      "y":560,
      "wires":[

      ]
   },
   {
      "id":"b738608.feb22a",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"No case match",
      "info":"presence_state = true and presence_state_changed = false and period_state_changed = false",
      "x":2500,
      "y":560,
      "wires":[

      ]
   },
   {
      "id":"803c9f9d.b7af2",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Console Log",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2990,
      "y":740,
      "wires":[

      ]
   },
   {
      "id":"b46b2c7e.9475a",
      "type":"change",
      "z":"e9fe1d42.a0e2a",
      "name":"Settings",
      "rules":[
         {
            "t":"set",
            "p":"flowTrigger",
            "pt":"msg",
            "to":"Scheduler",
            "tot":"str"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":1280,
      "y":240,
      "wires":[
         [
            "51432126.6355a"
         ]
      ]
   },
   {
      "id":"705af088.aa57e",
      "type":"mqtt out",
      "z":"e9fe1d42.a0e2a",
      "name":"Send State",
      "topic":"NodeRED/HA/Scene/State",
      "qos":"0",
      "retain":"false",
      "broker":"17c97a3d.3419f6",
      "x":3190,
      "y":300,
      "wires":[

      ]
   },
   {
      "id":"6630f544.9c666c",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"MQTT Message",
      "field":"payload",
      "fieldType":"msg",
      "format":"handlebars",
      "syntax":"mustache",
      "template":"{\n  \"type\": \"{{dayType}}\",\n  \"period\": \"{{periodState}}\",\n  \"presence\": {{presenceState}},\n  \"holidays_events\": \"{{todaysHolidayEvents}}\",\n  \"half_day_events\": \"{{todaysHalfDayEvents}}\",\n  \"persons_at_home\": \"{{personsAtHome}}\"\n}",
      "output":"json",
      "x":3000,
      "y":300,
      "wires":[
         [
            "705af088.aa57e"
         ]
      ]
   },
   {
      "id":"4d97fab8.ae50a4",
      "type":"switch",
      "z":"e9fe1d42.a0e2a",
      "name":"Is Scheduler process?",
      "property":"flowTrigger",
      "propertyType":"msg",
      "rules":[
         {
            "t":"eq",
            "v":"Scheduler",
            "vt":"str"
         },
         {
            "t":"else"
         }
      ],
      "checkall":"false",
      "repair":false,
      "outputs":2,
      "x":2720,
      "y":600,
      "wires":[
         [
            "6630f544.9c666c"
         ],
         [
            "d5b2eab7.2ce828"
         ]
      ]
   },
   {
      "id":"b9b9641.6d7d498",
      "type":"change",
      "z":"e9fe1d42.a0e2a",
      "name":"Settings",
      "rules":[
         {
            "t":"set",
            "p":"flowName",
            "pt":"flow",
            "to":"HA Scenes",
            "tot":"str"
         },
         {
            "t":"set",
            "p":"flowNumber",
            "pt":"flow",
            "to":"0",
            "tot":"str"
         },
         {
            "t":"set",
            "p":"weekendEvening",
            "pt":"flow",
            "to":"Friday",
            "tot":"str"
         },
         {
            "t":"set",
            "p":"weekend",
            "pt":"flow",
            "to":"Saturday",
            "tot":"str"
         },
         {
            "t":"set",
            "p":"saveGlobal",
            "pt":"flow",
            "to":"true",
            "tot":"bool"
         },
         {
            "t":"set",
            "p":"nextAwayAction",
            "pt":"flow",
            "to":"($toMillis($now()) / 1000 / 60 / 60) + 1",
            "tot":"str"
         },
         {
            "t":"set",
            "p":"flowTrigger",
            "pt":"msg",
            "to":"Startup",
            "tot":"str"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":280,
      "y":100,
      "wires":[
         [
            "20a07fbc.28faa"
         ]
      ]
   },
   {
      "id":"a1d7b9d0.1614b8",
      "type":"catch",
      "z":"e9fe1d42.a0e2a",
      "name":"Catch Errors",
      "scope":null,
      "uncaught":false,
      "x":2490,
      "y":700,
      "wires":[
         [
            "7bf17377.33894c"
         ]
      ]
   },
   {
      "id":"7bf17377.33894c",
      "type":"change",
      "z":"e9fe1d42.a0e2a",
      "name":"Flow Details",
      "rules":[
         {
            "t":"set",
            "p":"flow_name",
            "pt":"msg",
            "to":"flowName",
            "tot":"flow"
         },
         {
            "t":"set",
            "p":"flow_number",
            "pt":"msg",
            "to":"flowNumber",
            "tot":"flow"
         }
      ],
      "action":"",
      "property":"",
      "from":"",
      "to":"",
      "reg":false,
      "x":2750,
      "y":700,
      "wires":[
         [
            "803c9f9d.b7af2",
            "d5b2eab7.2ce828"
         ]
      ]
   },
   {
      "id":"892b825.1d1078",
      "type":"interval",
      "z":"e9fe1d42.a0e2a",
      "name":"Scheduler (10s)",
      "interval":"10",
      "onstart":false,
      "msg":"Scheduler",
      "showstatus":true,
      "unit":"seconds",
      "statusformat":"YYYY-MM-D HH:mm:ss",
      "x":100,
      "y":240,
      "wires":[
         [
            "b46b2c7e.9475a"
         ]
      ]
   },
   {
      "id":"d45a314e.9f2d2",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"Holiday Events",
      "field":"holidayEvents",
      "fieldType":"flow",
      "format":"handlebars",
      "syntax":"mustache",
      "template":"{\n   \"Election 2019 #2\":\"2019-09-17\",\n   \"Rosh Hashana #1\":\"2019-09-30\",\n   \"Rosh Hashana #2\":\"2019-10-01\",\n   \"Kipur\":\"2019-10-09\",\n   \"Sukot #1\":\"2019-10-14\",\n   \"Sukot #2\":\"2019-10-21\",\n   \"Pesah #1\":\"2020-04-09\",\n   \"Pesah #2\":\"2020-04-16\",\n   \"Yom Haatzmaut\":\"2020-04-29\"\n}",
      "output":"json",
      "x":640,
      "y":100,
      "wires":[
         [
            "295efdec.02d6a2"
         ]
      ]
   },
   {
      "id":"295efdec.02d6a2",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"Half-Day Events",
      "field":"halfDayEvents",
      "fieldType":"flow",
      "format":"handlebars",
      "syntax":"mustache",
      "template":"{\n   \"Rosh Hashana Eve\":\"2019-09-29\",\n   \"Kipur\": \"2019-10-08\",\n   \"Sukot Eve #1\":\"2019-10-13\",\n   \"Sukot Eve #2\":\"2019-10-20\",\n   \"Pesah Eve #1\":\"2020-04-08\",\n   \"Pesah Eve #2\":\"2020-04-15\",\n   \"Yom Haatzmaut Eve\":\"2020-04-28\"\n}",
      "output":"json",
      "x":840,
      "y":100,
      "wires":[
         [
            "f8f2f06b.9831e"
         ]
      ]
   },
   {
      "id":"20a07fbc.28faa",
      "type":"template",
      "z":"e9fe1d42.a0e2a",
      "name":"Day Periods",
      "field":"dayPeriods",
      "fieldType":"flow",
      "format":"json",
      "syntax":"mustache",
      "template":"{\n    \"Default\": \n    {\n        \"Morning\":\"06:00:00\",\n        \"Noon\":\"12:00:00\",\n        \"Afternoon\":\"16:00:00\",\n        \"Evening\":\"20:00:00\",\n        \"Night\":\"23:00:00\"\n    },\n    \"Holiday Evening\": \n    {\n        \"Morning\":\"06:30:00\",\n        \"Afternoon\":\"16:30:00\",\n        \"Evening\":\"21:00:00\"\n    },\n    \"Holiday\": \n    {\n        \"Morning\":\"09:00:00\",\n        \"Afternoon\":\"16:30:00\"\n    }\n   \n}",
      "output":"json",
      "x":450,
      "y":100,
      "wires":[
         [
            "d45a314e.9f2d2"
         ]
      ]
   },
   {
      "id":"e312f7d5.f5cfe8",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Set day parts",
      "func":"function getTodayPeriods(dayType, dayPeriods) {\n\tvar result = {};\n\tvar defaultDayPeriods = dayPeriods[\"Default\"];\n\n    Object.keys(defaultDayPeriods).forEach(function(key) {\n        var dayPeriod = defaultDayPeriods[key];\n        result[key] = dayPeriod;\n    });\n    \n    if(dayType != \"Default\") {\n        var currentDayPeriods = dayPeriods[dayType];\n        \n        Object.keys(currentDayPeriods).forEach(function(key) {\n            var dayPeriod = currentDayPeriods[key];\n            result[key] = dayPeriod;\n        });\n    }\n    \n\treturn result;\n}\n\nvar logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    msg.todayPeriods = getTodayPeriods(msg.dayType, msg.flowData.dayPeriods);\n\n    node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n}\ncatch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\nreturn msg;\n",
      "outputs":1,
      "noerr":0,
      "x":1750,
      "y":340,
      "wires":[
         [
            "aee004a8.4891e8"
         ]
      ]
   },
   {
      "id":"ef38e859.24cab8",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Update Persons @Home",
      "func":"var logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    var personsAtHome = flow.get(\"personsAtHome\");\n    \n    var entity = msg.data.new_state;\n    var entityAttributes = entity.attributes;\n    var personName = entityAttributes.friendly_name;\n    var isAllowed = entityAttributes.auto_scene;\n    var personState = msg.payload;\n    \n    var isPersonAtHome = [\"home\", \"on\"].indexOf(personState) > -1;\n    \n    if(isAllowed) {\n        personsAtHome[personName] = isPersonAtHome\n        \n        msg.flowTrigger = personName + ': ' + personState;\n        \n        flow.set(\"personsAtHome\", personsAtHome)\n        \n        node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n    } else {\n        node.status({fill:\"orange\",shape:\"ring\", text:\"Cancelled at \" + logNowStr});\n    }\n    \n} catch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\n\nreturn msg;\n",
      "outputs":1,
      "noerr":0,
      "x":330,
      "y":400,
      "wires":[
         [
            "7560e85.736a818"
         ]
      ]
   },
   {
      "id":"4b0c9c8f.01fdb4",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Set presence",
      "func":"var logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    var personsAtHome = msg.flowData.personsAtHome;\n    var personNameAtHomeArr = [];\n    \n    Object.keys(personsAtHome).forEach(function(key) {\n        var personAtHome = personsAtHome[key];\n        \n        if(personAtHome) {\n            personNameAtHomeArr.push(key);\n        }\n    });\n    \n    msg.personsAtHome = personNameAtHomeArr.join(\", \");\n    msg.presenceState = personNameAtHomeArr.length > 0;\n    msg.presenceStateChanged = msg.presenceState != msg.flowData.presenceState;\n    \n    var changeLog = [];\n    \n    if(msg.presenceStateChanged) {\n        var changeMessage = 'Day Type changed from ' + msg.flowData.presenceState + ' to ' + msg.presenceState;\n        changeLog.push(changeMessage);\n        \n        var personsMessage = \"Persons at home: \" + msg.personsAtHome;\n        changeLog.push(personsMessage);\n    }\n    \n    if(changeLog.length > 0) {\n        var changeLogMessage = changeLog.join(\", \");\n        msg.flowMessage = msg.flowMessage + ', ' + changeLogMessage;\n    }\n    \n    flow.set(\"presenceState\", msg.presenceState);\n    \n    if(msg.flowData.saveGlobal) {\n        global.set(\"presenceState\", msg.presenceState);\n    }\n    \n    node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n}\ncatch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\nreturn msg;\n",
      "outputs":1,
      "noerr":0,
      "x":1750,
      "y":460,
      "wires":[
         [
            "f513d40.40c213"
         ]
      ]
   },
   {
      "id":"8f074656.d7b9c8",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Extract from storage",
      "func":"var logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    msg.flowData = {}\n    \n    flow.keys().forEach(function(key) {\n        var value = flow.get(key);\n        msg.flowData[key] = value\n    }); \n    \n    node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n}\ncatch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\n\nreturn msg;\n",
      "outputs":1,
      "noerr":0,
      "x":1780,
      "y":240,
      "wires":[
         [
            "c9e6f849.f05f08"
         ]
      ]
   },
   {
      "id":"ca6c0a1d.04f9b8",
      "type":"server-state-changed",
      "z":"e9fe1d42.a0e2a",
      "name":"Person: Any",
      "server":"ec87011b.5f82a",
      "version":1,
      "entityidfilter":"person.",
      "entityidfiltertype":"substring",
      "outputinitially":false,
      "state_type":"str",
      "haltifstate":"",
      "halt_if_type":"str",
      "halt_if_compare":"is",
      "outputs":1,
      "output_only_on_state_change":true,
      "x":90,
      "y":400,
      "wires":[
         [
            "ef38e859.24cab8"
         ]
      ]
   },
   {
      "id":"7560e85.736a818",
      "type":"switch",
      "z":"e9fe1d42.a0e2a",
      "name":"Can Process?",
      "property":"flowTrigger",
      "propertyType":"msg",
      "rules":[
         {
            "t":"nempty"
         }
      ],
      "checkall":"true",
      "repair":false,
      "outputs":1,
      "x":1260,
      "y":400,
      "wires":[
         [
            "51432126.6355a"
         ]
      ]
   },
   {
      "id":"f8f2f06b.9831e",
      "type":"ha-get-entities",
      "z":"e9fe1d42.a0e2a",
      "server":"ec87011b.5f82a",
      "name":"Persons",
      "rules":[
         {
            "property":"attributes.auto_scene",
            "logic":"is",
            "value":"true",
            "valueType":"bool"
         }
      ],
      "output_type":"array",
      "output_empty_results":false,
      "output_location_type":"msg",
      "output_location":"payload",
      "output_results_count":1,
      "x":1020,
      "y":100,
      "wires":[
         [
            "1932edce.13a6a2"
         ]
      ]
   },
   {
      "id":"1932edce.13a6a2",
      "type":"function",
      "z":"e9fe1d42.a0e2a",
      "name":"Update Persons @Home",
      "func":"var logNow = new Date();\nlogNowStr = logNow.toLocaleString(\"en-IL\");\n\t\ntry {\n    var homeStates = [\"home\", \"on\"];\n    var entities = msg.payload;\n    var personsAtHome = {};\n    \n    for (var i = 0; i < entities.length; i++) {\n        var entity = entities[i];\n        var entityState = entity.state;\n        var entityAttributes = entity.attributes;\n        \n        var personName = entityAttributes.friendly_name;\n        var isPersonAtHome = homeStates.indexOf(entityState) > -1;\n        \n        personsAtHome[personName] = isPersonAtHome;\n    }\n    \n    flow.set(\"personsAtHome\", personsAtHome)\n        \n    node.status({fill:\"green\", text:\"Success at \" + logNowStr});\n} catch (e) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed at \" + logNowStr});\n    throw e;\n}\n\n\nreturn msg;\n",
      "outputs":1,
      "noerr":0,
      "x":1230,
      "y":100,
      "wires":[
         [
            "51432126.6355a"
         ]
      ]
   },
   {
      "id":"b34252f5.46e0c",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Morning Scene",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2700,
      "y":340,
      "wires":[

      ]
   },
   {
      "id":"9b065308.6c27c",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Noon Scene",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2690,
      "y":380,
      "wires":[

      ]
   },
   {
      "id":"a1322713.4b33a8",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Afternoon Scene",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2710,
      "y":420,
      "wires":[

      ]
   },
   {
      "id":"3e490209.bc8d3e",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Evening Scene",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2700,
      "y":460,
      "wires":[

      ]
   },
   {
      "id":"8813930.ec25c7",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Night Scene",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2690,
      "y":500,
      "wires":[

      ]
   },
   {
      "id":"d5b2eab7.2ce828",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Write Log",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2980,
      "y":640,
      "wires":[

      ]
   },
   {
      "id":"282703df.348ffc",
      "type":"debug",
      "z":"e9fe1d42.a0e2a",
      "name":"Away Scene",
      "active":true,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":2990,
      "y":160,
      "wires":[

      ]
   },
   {
      "id":"a3030dd1.9fdd4",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Day periods - example",
      "info":"Contains 3 main profile:\n - Default - should have all expected day period of the profile\n - Holiday - Override day parts\n - Holiday Evening - Override day parts\n \n{\n    \"Default\": \n    {\n        \"Morning\":\"06:00:00\",\n        \"Noon\":\"12:00:00\",\n        \"Afternoon\":\"16:00:00\",\n        \"Evening\":\"20:00:00\",\n        \"Night\":\"23:00:00\"\n    },\n    \"Holiday Evening\": \n    {\n        \"Morning\":\"06:30:00\",\n        \"Afternoon\":\"16:30:00\",\n        \"Evening\":\"21:00:00\"\n    },\n    \"Holiday\": \n    {\n        \"Morning\":\"09:00:00\",\n        \"Afternoon\":\"16:30:00\"\n    }\n   \n}",
      "x":460,
      "y":60,
      "wires":[

      ]
   },
   {
      "id":"2c337fd0.56fa1",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Holiday / Half-Day events - example",
      "info":"List of events:\n{\n    \"Event\": \"Date ISO Format (yyyy-MM-dd)\"\n}",
      "x":740,
      "y":60,
      "wires":[

      ]
   },
   {
      "id":"857aa1fd.cdef8",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Default settings on startup",
      "info":"# Flow context:\n## flowName\nDefines the flow name for log purpose\n\n**Default:** HA Scenes\n\n## flowNumber \nDefines the flow number for log purpose\n\n**Default:** 0\n\n## weekendEvening \nDefines the weekend evening day\n\n**Default:** Friday\n\n## weekend \nDefines the weekend day\n\n**Default:** Saturday\n\n## saveGlobal \nDefines whether to save presence and day period in global storage or not\n\n**Default:** false\n\n## nextAwayAction \nDefines the next allowed timestamp to execute away flow,\nBy default if no one at home, AWAY flow will run every 1 hour\n\n**Default:** \"($toMillis($now()) / 1000 / 60 / 60) + 1\"\n\n#  Message context:\n\n## flowTrigger\nDefines the trigger name, the are 3 options:\n- Startup - on startup\n- Scheduler - every 10 seconds\n- Person entity - Name and state\n\n**Default:** Startup\n",
      "x":270,
      "y":140,
      "wires":[

      ]
   },
   {
      "id":"f55dcc59.8c17",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Collect person supported by the flow",
      "info":"By default, none of the persons in HA are supported by the flow,\nIn order to allow using the flow, \nSet for each person that should trigger an event attribute for person entity in HA: **auto_scene = true**\n\nScript will collect all persons with that attribute",
      "x":1140,
      "y":140,
      "wires":[

      ]
   },
   {
      "id":"dabd1b82.924c88",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Update person state change",
      "info":"By default, none of the persons in HA are supported by the flow,\nIn order to allow using the flow, \nSet for each person that should trigger an event attribute for person entity in HA: **auto_scene = true**\n\nScript will modify persons with that attribute",
      "x":340,
      "y":360,
      "wires":[

      ]
   },
   {
      "id":"81cdaee4.e5541",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"MQTT Message",
      "info":"# Publish MQTT message:\nTopic: NodeRED/HA/Scene/State\nMessage: \n{\n  \"type\": \"{{dayType}}\",\n  \"period\": \"{{periodState}}\",\n  \"presence\": {{presenceState}},\n  \"holidays_events\": \"{{todaysHolidayEvents}}\",\n  \"half_day_events\": \"{{todaysHalfDayEvents}}\",\n  \"persons_at_home\": \"{{personsAtHome}}\"\n}\n\n# Consume MQTT in HA:\n\n`\nbinary_sensor:\n    - platform: mqtt\n      name: \"HA Presence\"\n      state_topic: \"NodeRED/HA/Scene/State\"\n      value_template: \"{%if value_json.presence %}ON{%- else -%}OFF{%- endif -%}\"\n      json_attributes_topic: \"NodeRED/HA/Scene/State\"\n      device_class: \"presence\"\n    \n \nsensor:\n    - platform: mqtt\n      name: \"HA Day Period\"\n      state_topic: \"NodeRED/HA/Scene/State\"\n      value_template: \"{{ value_json.period }}\"\n      json_attributes_topic: \"NodeRED/HA/Scene/State\"\n    - platform: mqtt\n      name: \"HA Day Type\"\n      state_topic: \"NodeRED/HA/Scene/State\"\n      value_template: \"{{ value_json.type }}\"\n      json_attributes_topic: \"NodeRED/HA/Scene/State\"\n`",
      "x":3100,
      "y":260,
      "wires":[

      ]
   },
   {
      "id":"9f0cd65e.e054e8",
      "type":"comment",
      "z":"e9fe1d42.a0e2a",
      "name":"Scripts",
      "info":"# Changing the script below might cause the flow stop working:\n\n## Set configuration\nSets msg parameters for running additional steps\n\n## Extract from storage\nConverts all flow parameters into msg.flowData object to easily access them later in the flow\n\n## Set day type\nCalculates the day type based on holiday and Half-day events set at startup\n\n## Set day periods\nCalculates the day parts based on the day type, will take the default configuration and merge it with override day type\n\n## Set current period\nCalculates the current day period to allow activating the right scene\nStores in global context the state when msg.saveGlobal = true to reuse in other flows\n\n## Set presence\nCalculate presence state based on persons (HA person with auto_scene attribute as true) at home\nStores in global context the state when msg.saveGlobal = true to reuse in other flows",
      "x":1650,
      "y":200,
      "wires":[

      ]
   },
   {
      "id":"17c97a3d.3419f6",
      "type":"mqtt-broker",
      "z":"",
      "name":"",
      "broker":"hostname",
      "port":"1883",
      "clientid":"NodeRED",
      "usetls":false,
      "compatmode":false,
      "keepalive":"60",
      "cleansession":true,
      "birthTopic":"",
      "birthQos":"0",
      "birthPayload":"",
      "closeTopic":"",
      "closeQos":"0",
      "closePayload":"",
      "willTopic":"",
      "willQos":"0",
      "willPayload":""
   },
   {
      "id":"ec87011b.5f82a",
      "type":"server",
      "z":"",
      "name":"Home Assistant",
      "legacy":false,
      "hassio":true,
      "rejectUnauthorizedCerts":true,
      "ha_boolean":"y|yes|true|on|home|open",
      "connectionDelay":false
   }
]
